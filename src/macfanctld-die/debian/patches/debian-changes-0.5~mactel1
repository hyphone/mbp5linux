Description: Upstream changes introduced in version 0.5~mactel1
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 macfanctld (0.5~mactel1) natty; urgency=low
 .
   * Corrected comment in macfanctl.conf
 .
 The person named in the Author field signed this changelog entry.
Author: Mikael Strom <mikael@sesamiq.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- /dev/null
+++ macfanctld-0.5~mactel1/debug.sh
@@ -0,0 +1,3 @@
+sudo ./macfanctld
+sudo nemiver --attach=`pgrep macfanctld` &
+
--- /dev/null
+++ macfanctld-0.5~mactel1/TODO
@@ -0,0 +1,3 @@
+- A gui would be nice.
+
+
--- /dev/null
+++ macfanctld-0.5~mactel1/macfanctld.1
@@ -0,0 +1,103 @@
+.TH macfanctld 1 "November 17, 2010" "Version 0.5" "USER COMMANDS"
+.SH NAME
+macfanctld \- Fan control for MacBook
+.SH SYNOPSIS
+.B macfanctld
+[\-f]
+.SH DESCRIPTION
+macfanctld is a daemon that reads temperature sensors and adjust the fan(s) speed on MacBook's. macfanctld is configurable and logs temp and fan data to a file. macfanctld uses three sources to determine the fan speeed: 1) average temperature from all sensors, 2) sensor TC0P [CPU 0 Proximity Temp and 3] and sensor TG0P [GPU 0 Proximity Temp]. Each source's impact on fan speed can be individually adjusted to fine tune working temperature on different MacBooks.
+
+Important: macfanctld depends on applesmc-dkms.
+.SH OPTIONS
+.TP
+.B \-f
+runs macfanctld the in foreground, logging to stdout.
+.SH EXIT STATUS
+macfanctld returns non-zero exist status in case of failure to start.
+.SH FILES
+.I /etc/init.d/macfanctld
+.RS
+.P
+Daemon init script.
+
+.RE
+.I /etc/macfanctl.conf
+.RS
+.P
+Configuration file that can be tuned to get desired working temperature. The format must be
+.I <key>:<number>.
+
+.I fan_min:
+Minimum fan speed. Typically, this is set to 2000 (Apples default). Maximum speed is 6200.
+
+.I temp_avg_floor:
+Average temperature in Celsius at which the fan speed will be set to fan_min. Valid values are 0 to 90, and must be less than temp_avg_ceiling.
+
+.I temp_avg_ceiling: 
+Average temperature in Celsius at which the fan speed will be set to max (6200). Valid values are 0 to 90, and must be larger than temp_avg_floor.
+
+.I temp_TC0P_floor:
+Temperature in Celsius at TC0P, at which the fan speed will be set to fan_min. Valid values are 0 to 90, and must be less than temp_TC0P_ceiling.
+
+.I temp_TC0P_ceiling:
+Temperature in Celsius at TC0P, at which the fan speed will be set to max (6200). Valid values are 0 to 90, and must be larger than temp_TC0P_floor.
+
+.I temp_TG0P_floor
+:
+Temperature in Celsius at TG0P, at which the fan speed will be set to fan_min. Valid values are 0 to 90, and must be less than temp_TG0P_ceiling.
+
+.I temp_TG0P_ceiling:
+Temperature in Celsius at TG0P, at which the fan speed will be set to max (6200). Valid values are 0 to 90, and must be larger than temp_TG0P_floor.
+
+.I exclude: 
+A list of natural numbers defining sensors that should be excluded from reading. Example:
+
+exclude: 1 7
+
+will disable reading of sensors temp1_input and temp7_input.
+
+This feature was added as a workaround for issues in applesmc-dkms that disables reading of some sensors, or in some cases, incorrectly defines sensors that don't exists.
+
+.I log_level values:
+Set the log level. Valid values are:
+ 0 - Startup / Exit logging only
+ 1 - Basic temp / fan logging
+ 2 - Log all sensors
+.RE
+
+.I /var/log/macfanctl.log
+.RS
+.P
+Log file. When log_level is 1, the following ouput is generated:
+
+  Speed: 6200,  AVG: 52.5C, *TC0P: 62.0C,  TG0P: 62.0C
+  Speed: 6200,  AVG: 52.4C, *TC0P: 62.0C,  TG0P: 61.8C
+  Speed: 6200,  AVG: 52.4C,  TC0P: 61.8C, *TG0P: 62.0C
+  Speed: 6168,  AVG: 52.3C,  TC0P: 61.8C, *TG0P: 61.8C
+  Speed: 6168,  AVG: 52.2C,  TC0P: 61.5C, *TG0P: 61.8C
+
+Speed is the current fan speed. 
+
+AVG, TC0P and TG0P shows the temperature in Celsius at the source. 
+
+The '*' indicate which source that is currently driving the fan. 
+.RE
+
+.SH NOTES
+Hopefully the provided configuration file will be suitable on most MacBooks. However, there has been very little testing at this point. Therefore, enable logging and keep an eye on the temperatures in the log, as well as sensing the temp with your hand on the left part above the keyboard. If it feels too hot, tweak the config file!
+
+To follow the log as it's written do
+
+$ tail -F /var/log/macfanctl.log
+.SH BUGS
+There are most certainly bugs in this software. 
+
+Please submit bug reports, comments and suggestions to mikael@sesamiq.com.
+
+.SH AUTHOR
+Mikael Strom (mikael@sesamiq.com)
+.SH "SEE ALSO"
+tail (1) 
+
+
+
--- /dev/null
+++ macfanctld-0.5~mactel1/config.h
@@ -0,0 +1,42 @@
+/*
+ *  config.h -  Fan control daemon for MacBook
+ *
+ *  Copyright (C) 2010  Mikael Strom <mikael@sesamiq.com>
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ */
+
+#ifndef CONFIG_H_
+#define CONFIG_H_
+
+extern float temp_avg_floor;
+extern float temp_avg_ceiling;
+
+extern float temp_TC0P_floor;
+extern float temp_TC0P_ceiling;
+
+extern float temp_TG0P_floor;
+extern float temp_TG0P_ceiling;
+
+extern float fan_min;
+extern float fan_max;
+
+extern int log_level;
+
+void read_cfg(char* name);
+
+#define MAX_EXCLUDE		20
+extern int exclude[MAX_EXCLUDE];	// array of sensors to exclude
+
+#define max(a,b)	(a > b ? a : b)
+#define min(a,b)	(a < b ? a : b)
+
+#endif /* CONFIG_H_ */
--- /dev/null
+++ macfanctld-0.5~mactel1/control.c
@@ -0,0 +1,579 @@
+/*
+ *  control.c -  Fan control daemon for MacBook
+ *
+ *  Copyright(C) 2010  Mikael Strom <mikael@sesamiq.com>
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <dirent.h>
+#include <assert.h>
+#include <unistd.h>
+#include "config.h"
+
+//------------------------------------------------------------------------------
+
+#define HWMON_DIR		"/sys/class/hwmon"
+#define APPLESMC_ID		"applesmc"
+
+struct
+{
+	char *key;
+	char *desc;
+}
+sensor_desc[] =
+{
+	{"TB0T", "Battery TS_MAX Temp"},
+	{"TB1T", "Battery TS1 Temp"},
+	{"TB2T", "Battery TS2 Temp"},
+	{"TB3T", "Battery Temp"},
+	{"TC0D", "CPU 0 Die Temp"},
+	{"TC0P", "CPU 0 Proximity Temp"},
+	{"TG0D", "GPU Die - Digital"},
+	{"TG0P", "GPU 0 Proximity Temp"},
+	{"TG0T", "GPU 0 Die - Analog Temp"},
+	{"TG0H", "Left Heat Pipe/Fin Stack Proximity Temp"},
+	{"TG1H", "Left Heat Pipe/Fin Stack Proximity Temp"},
+	{"TN0P", "MCP Proximity"},
+	{"TN0D", "MCP Die"},
+	{"Th2H", "Right Fin Stack Proximity Temp"},
+	{"Tm0P", "Battery Charger Proximity Temp"},
+	{"Ts0P", "Palm Rest Temp"}
+};
+#define N_DESC			(sizeof(sensor_desc) / sizeof(sensor_desc[0]))
+
+#define SENSKEY_MAXLEN	16
+
+struct sensor
+{
+	int id;
+	int excluded;
+	char name[SENSKEY_MAXLEN];
+	float value;
+};
+
+//------------------------------------------------------------------------------
+
+char base_path[PATH_MAX];
+char fan1_min[PATH_MAX];
+char fan2_min[PATH_MAX];
+char fan1_man[PATH_MAX];
+char fan2_man[PATH_MAX];
+
+int sensor_count = 0;
+int fan_count = 0;
+float temp_avg = 0;
+int fan_speed;
+
+struct sensor *sensors = NULL;
+struct sensor *sensor_TC0P = NULL;
+struct sensor *sensor_TG0P = NULL;
+
+#define CTL_NONE	0	// sensor control fan flags
+#define CTL_AVG		1
+#define CTL_TC0P	2
+#define CTL_TG0P	3
+
+int fan_ctl = 0;		// which sensor controls fan
+
+//------------------------------------------------------------------------------
+
+void find_applesmc()
+{
+	DIR *fd_dir;
+	int ret;
+
+	base_path[0] = 0;
+
+	// find and verify applesmc path in /sys/devices
+
+	fd_dir = opendir(HWMON_DIR);
+
+	if(fd_dir != NULL)
+	{
+		struct dirent *dir_entry;
+		
+		while((dir_entry = readdir(fd_dir)) != NULL && base_path[0] == 0)
+		{
+			if(dir_entry->d_name[0] != '.')
+			{
+				char name_path[PATH_MAX];
+				int fd_name;
+
+				sprintf(name_path, "%s/%s/device/name", HWMON_DIR, dir_entry->d_name);
+								
+				fd_name = open(name_path, O_RDONLY);
+
+				if(fd_name > -1)
+				{
+					char name[sizeof(APPLESMC_ID)];
+
+					ret = read(fd_name, name, sizeof(APPLESMC_ID) - 1);
+					
+					close(fd_name);
+
+					if(ret == sizeof(APPLESMC_ID) - 1)
+					{
+						if(strncmp(name, APPLESMC_ID, sizeof(APPLESMC_ID) - 1) == 0)
+						{
+							char *dev_path;
+							char *last_slash = strrchr(name_path, '/');
+							
+							if(last_slash != NULL)
+							{
+								*last_slash = 0;
+
+								dev_path = realpath(name_path, NULL);
+								
+								if(dev_path != NULL)
+								{
+									strncpy(base_path, dev_path, sizeof(base_path) - 1);
+									base_path[sizeof(base_path) - 1] = 0;
+									free(dev_path);
+								}
+							}
+						}
+					}
+				}
+			}
+		}
+		closedir(fd_dir);
+	}
+	
+	// create paths to fan and sensor
+	
+	if(base_path[0] == 0)
+	{
+		printf("Error: Can't find a applesmc device\n");
+		exit(-1);
+	}
+	
+	sprintf(fan1_min, "%s/fan1_min", base_path);
+	sprintf(fan2_min, "%s/fan2_min", base_path);
+	sprintf(fan1_man, "%s/fan1_manual", base_path);
+	sprintf(fan2_man, "%s/fan2_manual", base_path);
+
+	printf("Found applesmc at %s\n", base_path);
+}
+
+//#define base_path	"/sys/devices/platform/applesmc.768"
+//#define fan1_min	"/sys/devices/platform/applesmc.768/fan1_min"
+//#define fan2_min	"/sys/devices/platform/applesmc.768/fan2_min"
+//#define fan1_man	"/sys/devices/platform/applesmc.768/fan1_manual"
+//#define fan2_man	"/sys/devices/platform/applesmc.768/fan2_manual"
+
+//------------------------------------------------------------------------------
+
+void read_sensors()
+{
+	int i;
+	for(i = 0; i < sensor_count; ++i)
+	{
+		if(! sensors[i].excluded)
+		{
+			// read temp value
+
+			char fname[PATH_MAX];
+			sprintf(fname, "%s/temp%d_input", base_path, sensors[i].id);
+
+			FILE *fp = fopen(fname, "r");
+			if(fp == NULL)
+			{
+				printf("Error: Can't open %s\n", fname);
+				fflush(stdout);
+			}
+			else
+			{
+				char val_buf[16];
+				int n = fread(val_buf, 1, sizeof(val_buf), fp);
+				if(n < 1)
+				{
+					printf("Error: Can't read  %s\n", fname);
+				}
+				else
+				{
+					sensors[i].value = (float)atoi(val_buf) / 1000.0;
+				}
+				fclose(fp);
+			}
+		}
+	}
+
+	// calc average
+
+	temp_avg = 0.0;
+	int active_sensors = 0;
+
+	for(i = 0; i < sensor_count; ++i)
+	{
+		if(! sensors[i].excluded)
+		{
+			temp_avg += sensors[i].value;
+			++active_sensors;
+		}
+	}
+
+	temp_avg = temp_avg / active_sensors;
+}
+
+//------------------------------------------------------------------------------
+
+void calc_fan()
+{
+	fan_speed = fan_min;
+	fan_ctl = CTL_NONE;
+
+	// calc fan speed on average
+
+	float fan_window = fan_max - fan_min;
+	float temp_avg_window = temp_avg_ceiling - temp_avg_floor;
+	float normalized_temp =(temp_avg - temp_avg_floor) / temp_avg_window;
+	float fan_avg_speed =(normalized_temp * fan_window);
+	if(fan_avg_speed > fan_speed)
+	{
+		fan_speed = fan_avg_speed;
+		fan_ctl = CTL_AVG;
+	}
+
+	// calc fan speed for TC0P
+
+	if(sensor_TC0P != NULL)
+	{
+		float temp_window = temp_TC0P_ceiling - temp_TC0P_floor;
+		float normalized_temp =(sensor_TC0P->value - temp_TC0P_floor) / temp_window;
+		float fan_TC0P_speed =(normalized_temp * fan_window);
+		if(fan_TC0P_speed > fan_speed)
+		{
+			fan_speed = fan_TC0P_speed;
+			fan_ctl = CTL_TC0P;
+		}
+	}
+
+	// calc fan speed for TG0P
+
+	if(sensor_TG0P != NULL)
+	{
+		float temp_window = temp_TG0P_ceiling - temp_TG0P_floor;
+		float normalized_temp =(sensor_TG0P->value - temp_TG0P_floor) / temp_window;
+		float fan_TG0P_speed =(normalized_temp * fan_window);
+		if(fan_TG0P_speed > fan_speed)
+		{
+			fan_speed = fan_TG0P_speed;
+			fan_ctl = CTL_TG0P;
+		}
+	}
+
+	// finally clamp
+
+	fan_speed = min(fan_max, fan_speed);
+}
+
+//------------------------------------------------------------------------------
+
+void set_fan()
+{
+	FILE *fp;
+
+	char buf[16];
+
+	// update fan 1
+
+	fp = fopen(fan1_min, "w");
+	if(fp == NULL)
+	{
+		printf("Error: Can't open %s\n", fan1_min);
+	}
+	else
+	{
+		sprintf(buf, "%d", fan_speed);
+		fwrite(buf, 1, strlen(buf), fp);
+		fclose(fp);
+	}
+
+	// set fan 1 manual to zero
+
+	fp = fopen(fan1_man, "w");
+	if(fp == NULL)
+	{
+		printf("Error: Can't open %s\n", fan1_man);
+	}
+	else
+	{
+		strcpy(buf, "0");
+		fwrite(buf, 1, strlen(buf), fp);
+		fclose(fp);
+	}
+
+	// update fan 2
+
+	if(fan_count > 1)
+	{
+		fp = fopen(fan2_min, "w");
+		if(fp == NULL)
+		{
+			printf("Error: Can't open %s\n", fan2_min);
+		}
+		else
+		{
+			sprintf(buf, "%d", fan_speed);
+			fwrite(buf, 1, strlen(buf), fp);
+			fclose(fp);
+		}
+
+		// set fan 2 manual to zero
+
+		fp = fopen(fan2_man, "w");
+		if(fp == NULL)
+		{
+			printf("Error: Can't open %s\n", fan2_man);
+		}
+		else
+		{
+			strcpy(buf, "0");
+			fwrite(buf, 1, strlen(buf), fp);
+			fclose(fp);
+		}
+	}
+
+	fflush(stdout);
+}
+
+//------------------------------------------------------------------------------
+
+void adjust()
+{
+	read_sensors();
+	calc_fan();
+	set_fan();
+}
+
+//------------------------------------------------------------------------------
+
+void scan_sensors()
+{
+	int i;
+	int j;
+	struct stat buf;
+	int result;
+
+	sensor_TC0P = NULL;
+	sensor_TG0P = NULL;
+
+	// get number of fans
+
+	result = stat(fan1_min, &buf);
+	if(result != 0)
+	{
+		printf("No fans detected, terminating!\n");
+		exit(-1);
+	}
+	else
+	{
+		fan_count = 1;
+	}
+
+	result = stat(fan2_min, &buf);
+	if(result != 0)
+	{
+		printf("Found 1 fan.\n");
+	}
+	else
+	{
+		fan_count = 2;
+		printf("Found 2 fans.\n");
+	}
+
+	// count number of sensors
+
+	int count = 0;
+	while(count < 100)	// more than 100 sensors is an error!
+	{
+		char fname[512];
+
+		// sensor numbering start at 1
+		sprintf(fname, "%s/temp%d_input", base_path, count + 1);
+		result = stat(fname, &buf);
+
+		if(result == 0)
+		{
+			++count;
+		}
+		else
+		{
+			break;		// done
+		}
+	}
+
+	sensor_count = count;
+
+	if(sensor_count > 0)
+	{
+		// Get sensor id, labels and descriptions, check exclude list
+
+		if(sensors != NULL)
+		{
+			free(sensors);
+		}
+
+		sensors = malloc(sizeof(struct sensor) * sensor_count);
+		assert(sensors != NULL);
+
+		printf("Found %d sensors:\n", sensor_count);
+
+		for(i = 0; i < sensor_count; ++i)
+		{
+			char fname[512];
+
+			// set id and check exclude list
+			sensors[i].id = i + 1;
+			sensors[i].excluded = 0;
+
+			for(j = 0; j < MAX_EXCLUDE && exclude[j] != 0; ++j)
+			{
+				if(exclude[j] == sensors[i].id)
+				{
+					sensors[i].excluded = 1;
+					break;
+				}
+			}
+
+			// read label
+			sprintf(fname, "%s/temp%d_label", base_path, sensors[i].id);
+
+			sensors[i].name[0] = 0; // set zero length
+
+			FILE *fp = fopen(fname, "r");
+			if(fp == NULL)
+			{
+				printf("Error: Can't open %s\n", fname);
+			}
+			else
+			{
+				char key_buf[SENSKEY_MAXLEN];
+				memset(key_buf, 0, SENSKEY_MAXLEN);
+
+				int n = fread(key_buf, 1, SENSKEY_MAXLEN - 1, fp);
+				if(n < 1)
+				{
+					printf("Error: Can't read  %s\n", fname);
+				}
+				else
+				{
+					char *p_endl = strrchr(key_buf, '\n');
+					if(p_endl)
+					{
+						*p_endl = 0; 	// remove '\n'
+					}
+					strncpy(sensors[i].name, key_buf, SENSKEY_MAXLEN);
+				}
+				fclose(fp);
+			}
+		}
+
+		for(i = 0; i < sensor_count; ++i)		// for each label found
+		{
+			if(! sensors[i].excluded)
+			{
+				// try to find TC0P and TG0P
+				// if found, assign sensor_TC0P and sensor_TG0P for later use
+
+				if(strcmp(sensors[i].name, "TC0P") == 0)
+				{
+					sensor_TC0P = &sensors[i];
+				}
+				else if(strcmp(sensors[i].name, "TG0P") == 0)
+				{
+					sensor_TG0P = &sensors[i];
+				}
+			}
+
+			// print out sensor information.
+
+			printf("\t%2d: ", sensors[i].id);
+
+			int found = 0;
+			for(j = 0; j < N_DESC && ! found; ++j)		// find in descriptions table
+			{
+				if(strcmp(sensors[i].name, sensor_desc[j].key) == 0)
+				{
+					found = 1;
+					printf("%s - %s", sensor_desc[j].key, sensor_desc[j].desc);
+				}
+			}
+			if(! found)
+			{
+				printf("%s - ?", sensors[i].name);
+			}
+
+			printf(" %s\n", sensors[i].excluded ? "   ***EXCLUDED***" : "");
+		}
+	}
+	else
+	{
+		printf("No sensors detected, terminating!\n");
+		exit(-1);
+	}
+
+	fflush(stdout);
+}
+
+//------------------------------------------------------------------------------
+
+void logger()
+{
+	int i;
+
+	if(log_level > 0)
+	{
+		printf("Speed: %d, %sAVG: %.1fC" ,
+			   fan_speed,
+			   fan_ctl == CTL_AVG ? "*" : " ",
+			   temp_avg);
+
+		if(sensor_TC0P != NULL)
+		{
+			printf(", %sTC0P: %.1fC" ,
+				   fan_ctl == CTL_TC0P ? "*" : " ",
+				   sensor_TC0P->value);
+		}
+
+		if(sensor_TG0P != NULL)
+		{
+			printf(", %sTG0P: %.1fC" ,
+				   fan_ctl == CTL_TG0P ? "*" : " ",
+				   sensor_TG0P->value);
+		}
+
+		if(log_level > 1)
+		{
+			printf(", Sensors: ");
+			for(i = 0; i < sensor_count; ++i)
+			{
+				if(! sensors[i].excluded)
+				{
+					printf("%s:%.0f ", sensors[i].name, sensors[i].value);
+				}
+			}
+		}
+
+		printf("\n");
+		fflush(stdout);
+	}
+}
+
+//------------------------------------------------------------------------------
+
--- /dev/null
+++ macfanctld-0.5~mactel1/config.c
@@ -0,0 +1,285 @@
+/*
+ *  config.c -  Fan control daemon for MacBook
+ *
+ *  Copyright (C) 2010  Mikael Strom <mikael@sesamiq.com>
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <ctype.h>
+#include "config.h"
+
+//-----------------------------------------------------------------------------
+
+static FILE *fp;
+
+float temp_avg_floor = 40;		// default values if no config file is found
+float temp_avg_ceiling = 50;
+
+float temp_TC0P_floor = 40;
+float temp_TC0P_ceiling = 50;
+
+float temp_TG0P_floor = 40;
+float temp_TG0P_ceiling = 50;
+
+float fan_min = 0;
+float fan_max = 6200;			// fixed max value
+
+int log_level = 0;
+
+int exclude[MAX_EXCLUDE];		// array of sensors to exclude
+
+//-----------------------------------------------------------------------------
+
+int match(char* name, char* buf)
+{
+	char* start = buf;
+	char* end = buf;
+
+	if(strlen(buf) < 1)
+	{
+		return 0;
+	}
+
+	// skip preceeding ws
+	while(*start && isblank(*start))
+	{
+		++start;
+	}
+
+	// skip to end
+	while(*end)
+	{
+		++end;
+	}
+
+	// delete ws backwards from end
+	while(end > start && isblank(*end))
+	{
+		*end = 0;
+		--end;
+	}
+
+	// compare strings
+
+	return strcmp(name, start) == 0;
+}
+
+//-----------------------------------------------------------------------------
+
+int get_val(char *buf)
+{
+	while(isblank(*buf))
+	{
+		++buf;
+	}
+
+	if(! *buf)
+	{
+		return -1;
+	}
+
+	return atoi(buf);
+}
+
+//-----------------------------------------------------------------------------
+// format is: name : integer
+
+int read_param(char* name, int min_val, int max_val, int def)
+{
+	fseek(fp, 0, SEEK_SET);
+
+	while(1)
+	{
+		char buf[64];
+		char *s = fgets(buf, sizeof(buf), fp);
+
+		if(s == NULL)
+		{
+			break;						// exit when no more to read
+		}
+
+		if(buf[0] == '#' || buf[0] == '\n')
+		{
+			continue;					// skip comments
+		}
+
+		char *colon = strchr(buf, ':');	// find colon
+		if(colon == NULL)
+		{
+			printf("Ill formed line in config file: %s\n", buf);
+			continue;
+		}
+
+		*colon = 0;						// terminate string at colon
+
+		if(match(name, buf))
+		{
+			int val = get_val(colon + 1);	// get value
+
+			if(val < 0)
+			{
+				printf("Ill formed line in config file: %s\n", buf);
+				continue;
+			}
+			else
+			{
+				val = min(max_val, val);// clamp
+				val = max(min_val, val);
+				return val;				// success
+			}
+		}
+	}
+
+	return def;
+}
+
+//-----------------------------------------------------------------------------
+// format is: exclude : integer {integer}
+
+void read_exclude_list()
+{
+	fseek(fp, 0, SEEK_SET);
+
+	while(1)
+	{
+		char buf[256];
+		char *s = fgets(buf, sizeof(buf), fp);
+
+		if(s == NULL)
+		{
+			break;						// exit when no more to read
+		}
+
+		if(buf[0] == '#' || buf[0] == '\n')
+		{
+			continue;					// skip comments
+		}
+
+		char *colon = strchr(buf, ':');	// find colon
+		if(colon == NULL)
+		{
+			printf("Ill formed line in config file: %s\n", buf);
+			continue;
+		}
+
+		*colon = 0;						// terminate string at colon
+
+		if(match("exclude", buf))
+		{
+			int i;
+			char* values = colon + 1;
+		
+			// get values
+
+			for(i = 0; i < MAX_EXCLUDE; ++i)
+			{
+				while(isspace(*values) || *values == ',')
+				{
+					++values;
+				}
+				
+				if(isdigit(*values))
+				{
+					int val = get_val(values);
+					
+					if(val < 0)
+					{
+						printf("Ill formed line in config file: %s\n", buf);
+						return;
+					}
+					
+					exclude[i] = val;
+					
+					while(isdigit(*values))
+					{
+						++values;
+					}
+				}
+				else if(*values == 0)
+				{
+					return;		// done
+				}
+				else
+				{
+					printf("Ill formed line in config file: %s\n", buf);
+					return;
+				}
+			}
+		}
+	}
+}
+ 
+//-----------------------------------------------------------------------------
+
+void read_cfg(char* name)
+{
+	memset(exclude, 0, sizeof(exclude));
+
+	fp = fopen(name, "r");
+
+	if(fp != NULL)
+	{
+		temp_avg_ceiling = read_param("temp_avg_ceiling",	0, 90, 50);
+		temp_avg_floor = read_param("temp_avg_floor", 		0, temp_avg_ceiling - 1, 40);
+
+		temp_TC0P_ceiling = read_param("temp_TC0P_ceiling",	0, 90, 65);
+		temp_TC0P_floor = read_param("temp_TC0P_floor",		0, temp_TC0P_ceiling - 1, 50);
+
+		temp_TG0P_ceiling = read_param("temp_TG0P_ceiling",	0, 90, 80);
+		temp_TG0P_floor = read_param("temp_TG0P_floor",		0, temp_TG0P_ceiling - 1, 65);
+
+		fan_min = read_param("fan_min", 0, 6200, 0);
+
+		log_level = read_param("log_level", 0, 2, 0);
+		
+		read_exclude_list();
+
+		fclose(fp);
+	}
+	else
+	{
+		printf("Could not open config file %s\n", name);
+	}
+
+	printf("Using parameters:\n");
+
+	printf("\ttemp_avg_floor: %.0f\n", temp_avg_floor);
+	printf("\ttemp_avg_ceiling: %.0f\n", temp_avg_ceiling);
+
+	printf("\ttemp_TC0P_floor: %.0f\n", temp_TC0P_floor);
+	printf("\ttemp_TC0P_ceiling: %.0f\n", temp_TC0P_ceiling);
+
+	printf("\ttemp_TG0P_floor: %.0f\n", temp_TG0P_floor);
+	printf("\ttemp_TG0P_ceiling: %.0f\n", temp_TG0P_ceiling);
+
+	printf("\tfan_min: %.0f\n", fan_min);
+
+	if(exclude[0] != 0)
+	{
+		int i;
+
+		printf("\texclude: ");
+
+		for(i = 0; i < MAX_EXCLUDE && exclude[i] != 0; ++i)
+		{
+			printf("temp%d_input ", exclude[i]);
+		}
+		printf("\n");
+	}
+	
+	printf("\tlog_level: %d\n", log_level);
+}
+
+//-----------------------------------------------------------------------------
--- /dev/null
+++ macfanctld-0.5~mactel1/Makefile
@@ -0,0 +1,30 @@
+#
+# Makefile for macfanctl
+#
+# Mikael Strom, August 2010
+#
+
+CC = gcc
+CFLAGS = -Wall
+SBIN_DIR = $(DESTDIR)/usr/sbin
+ETC_DIR = $(DESTDIR)/etc
+
+all: macfanctld
+
+macfanctld: macfanctl.c control.c config.c control.h config.h
+	$(CC) $(CFLAGS) macfanctl.c control.c config.c -o macfanctld 
+
+clean:
+	dh_testdir
+	dh_clean
+	rm -rf *.o macfanctld
+
+install:
+	dh_installdirs
+	chmod +x macfanctld
+	cp macfanctld $(SBIN_DIR)
+	cp macfanctl.conf $(ETC_DIR)
+
+uninstall:
+	rm $(SBIN_DIR)/macfanctld $(INITD_DIR)/macfanctl $(ETC_DIR)/macfanctl.conf
+
--- /dev/null
+++ macfanctld-0.5~mactel1/macfanctl.c
@@ -0,0 +1,197 @@
+/*
+ *  macfanctl.c -  Fan control daemon for MacBook
+ *
+ *  Copyright (C) 2010  Mikael Strom <mikael@sesamiq.com>
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  Note:
+ *  This was written for MacBook Pro 5,1 and Ubutnu 10.04
+ *  Requires applesmc-dkms
+ *
+ */
+
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/time.h>
+#include <fcntl.h>
+#include <signal.h>
+
+#include "control.h"
+#include "config.h"
+
+//------------------------------------------------------------------------------
+
+#define PID_FILE	"/var/run/macfanctld.pid"
+#define LOG_FILE	"/var/log/macfanctl.log"
+#define CFG_FILE	"/etc/macfanctl.conf"
+
+int running = 1;
+int lock_fd = -1;
+int reload = 0;
+
+//------------------------------------------------------------------------------
+
+void signal_handler(int sig)
+{
+	switch (sig)
+	{
+	case SIGHUP:
+		reload = 1;
+		break;
+	case SIGINT:
+	case SIGTERM:
+		running = 0;
+		break;
+	}
+}
+
+//-----------------------------------------------------------------------------
+
+void daemonize()
+{
+	if (getppid() == 1)
+		return; // already a daemon
+
+	// fork of new process
+	pid_t pid = fork();
+
+	if(pid < 0)
+		exit(1); 		// fork error
+
+	if(pid > 0)
+		exit(0);		// parent exits
+
+	// child (daemon) continues
+
+#ifdef DEBUG
+	sleep(20);			// time to attach debugger to this process
+#endif
+
+	setsid(); 			// create a new session
+
+#ifdef DEBUG
+	umask(0);
+#else
+	umask(022); // set createfile permissions
+#endif
+
+	freopen(LOG_FILE, "w", stdout);
+	freopen("/dev/null", "r", stdin);
+
+	chdir("/");
+
+	// create lockfile
+	int lock_fd = open(PID_FILE, O_RDWR | O_CREAT, 0640);
+
+	if(lock_fd < 0)
+		exit(1); 		// open failed, we're a duplicate
+
+	if(lockf(lock_fd, F_TLOCK, 0) < 0)
+		exit(0); 		// lock failed - no idea what this means...
+
+	// first instance continues...
+	// write pid to file, and leave file open (blocking duplicates)
+
+	char str[32];
+	sprintf(str, "%d\n", getpid());
+	write(lock_fd, str, strlen(str));
+}
+
+//-----------------------------------------------------------------------------
+
+void usage()
+{
+	printf("usage: macfanctld [-f]\n");
+	printf("  -f  run in foregound\n");
+	exit(-1);
+}
+
+//-----------------------------------------------------------------------------
+
+int main(int argc, char *argv[])
+{
+	int i;
+	int daemon = 1;
+
+	// setup daemon
+	signal(SIGCHLD, SIG_IGN); 			// ignore child
+	signal(SIGTSTP, SIG_IGN); 			// ignore tty signals
+	signal(SIGTTOU, SIG_IGN);
+	signal(SIGTTIN, SIG_IGN);
+	signal(SIGINT, signal_handler); 	// catch Ctrl-C signal (terminating in foreground mode)
+	signal(SIGHUP, signal_handler); 	// catch hangup signal (reload config)
+	signal(SIGTERM, signal_handler); 	// catch kill signal
+
+	for(i = 1; i < argc; ++i)
+	{
+		if(strcmp(argv[i], "-f") == 0)
+		{
+			daemon = 0;
+		}
+		else
+		{
+			usage();
+		}
+	}
+
+	if(daemon)
+	{
+		daemonize();
+	}
+	else
+	{
+		printf("Running in foreground, log to stdout.\n");
+	}
+
+	// main loop
+
+	read_cfg(CFG_FILE);
+
+	find_applesmc();
+	scan_sensors();
+
+	running = 1;
+	while(running)
+	{
+		adjust();
+
+		logger();
+
+		if(reload)
+		{
+			read_cfg(CFG_FILE);
+			scan_sensors();
+			reload = 0;
+		}
+
+		sleep(5);
+	}
+
+	// close pid file and delete it
+
+	if(lock_fd != -1)
+	{
+		close(lock_fd);
+		unlink(PID_FILE);
+	}
+
+	printf("Exiting.\n");
+
+	return 0;
+}
+
+//-----------------------------------------------------------------------------
+
--- /dev/null
+++ macfanctld-0.5~mactel1/control.h
@@ -0,0 +1,25 @@
+/*
+ *  control.h -  Fan control daemon for MacBook
+ *
+ *  Copyright (C) 2010  Mikael Strom <mikael@sesamiq.com>
+ *
+ *  This program is free software: you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation, either version 3 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ */
+
+#ifndef CONTROL_H_
+#define CONTROL_H_
+
+void find_applesmc();	// called once at startup, before anything else!
+void scan_sensors();
+void adjust();
+void logger();
+
+#endif /* CONTROL_H_ */
--- /dev/null
+++ macfanctld-0.5~mactel1/macfanctl.conf
@@ -0,0 +1,28 @@
+# Config file for macfanctl daemon
+#
+# Note: 0 < temp_X_floor < temp_X_ceiling
+#       0 < fan_min < 6200       
+
+fan_min: 2000
+
+temp_avg_floor: 45
+temp_avg_ceiling: 55
+
+temp_TC0P_floor: 50
+temp_TC0P_ceiling: 58
+
+temp_TG0P_floor: 50
+temp_TG0P_ceiling: 58
+
+# Add sensors to be excluded here, separated by space, i.e.
+# exclude: 1 7
+# will disable reading of sensors temp1_input and temp7_input.
+
+exclude:
+
+# log_level values:
+#   0: Startup / Exit logging only
+#   1: Basic temp / fan logging
+#   2: Log all sensors  
+
+log_level: 0
